#-------------------------
#    Sets
#------------------------

"""
    Sets is useful to store mulitple data type values
    Set is un-order
    Set ommite Duplicate values
    Set is not maintaining the index value

"""

# Defining the Sets

demo={10,20,30,40}
demo1={"10","string",10.0,25}
print(demo)
print(demo1)

# using membership operator and len method in sets

print(20 in demo)
print(200 in demo1)

print(len(demo))
print(len(demo1))

'''
Sets methods 
add(ele)
remove(ele)
discard(ele)
pop()
clear()

joining two sets
------------------
union()
update()

keep only duplicate
----------------------
intersection()
intersection_update()

keep all excluding duplicates
------------------------------
symmetric_difference()
symmetric_difference_update()

Returns set containing difference between two or more sets
----------------------------------------------------------
difference()
difference_update()

issubset()
issuperset()

'''

demo_set1={10,20,30,40}
demo_set2={10,20,30,40,50,60}

print(demo_set1)
print(demo_set2)
# add(ele)  Adding the element to set
demo_set1.add(80)
print(demo_set1)
# remove(ele) Removing the element from the set
demo_set1.remove(80)
print(demo_set1)
# discard(ele) Removing the element from the set
print(demo_set1.discard(10))
# pop() Removing the element from the set
print(demo_set1.pop())
print(demo_set1)
# clear() Clear the set
demo_set1.clear()
print(demo_set1)

# joining two sets
# ------------------
A={'a','b','c'}
B={'a','b','c','d','e'}
# union()
C=A.union(B)
print(C)
# update()
A.update(B)
print(A)

# keep only duplicate
# ----------------------
# intersection()
C=A.intersection(B)
print(C)
# intersection_update()
A.intersection_update(B)
print(A)

# keep all excluding duplicates
# ------------------------------
# symmetric_difference()
C=B.symmetric_difference(A)
print(C)
# symmetric_difference_update()
B.symmetric_difference_update(A)
print(A)

# Returns set containing difference between two or more sets
# ----------------------------------------------------------
# difference()
C=A.difference(B)
print(C)
# difference_update()
A.difference_update(B)
print(A)

# issubset()
print(B.issubset(A))
# issuperset()
print(A.issuperset(B))