-------------------
pageobjects
   loginpage.py
---------------------

class loginpage:
    textbox_username_id="Email"
    textbox_passsword_id="Password"
    button_login_xpath="/html/body/div[6]/div/div/div/div/div[2]/div[1]/div/form/div[3]/button"
    link_logout_linktext="Logout"

    def __init__(self,driver):
        self.driver=driver

    def setusername(self,username):
        self.driver.find_element_by_id(self.textbox_username_id).clear()
        self.driver.find_element_by_id ( self.textbox_username_id ).send_keys(username)

    def setpassword(self, password):
        self.driver.find_element_by_id ( self.textbox_passsword_id ).clear ()
        self.driver.find_element_by_id ( self.textbox_passsword_id ).send_keys (password)

    def clicklogin(self):
        self.driver.find_element_by_xpath(self.button_login_xpath).click()

    def clicklogout(self):
        self.driver.find_element_by_link_text(self.link_logout_linktext).click()


-----------------------
testcase
    test_login.py:
------------------------


import pytest
from selenium import webdriver
from pageObjects.loginpage import loginpage
from utilities.readproperties import Readconfig
from utilities.customlogger import logGen

class Test_001_login:

    baseURL=Readconfig.getapplicaionurl()
    username=Readconfig.getusermail()
    password=Readconfig.getpasswod()

    logger=logGen.loggen()

    def test_homepage(self,setup):
        self.logger.info("****** Test_001_Login******")
        self.logger.info("****** Verifying Home page Title ********")
        self.driver=setup
        self.driver.get(self.baseURL)
        act_title=self.driver.title
        self.driver.close()

        if act_title == "Your store. Login":
            self.logger.info("******* Homepage title test is passed ********")
            assert True

        else:
            self.driver.save_screenshot(".//screenshots//" + "Home_page.png")
            self.logger.info ( "******* Homepage title test is Failed ********" )
            self.driver.close()
            assert False

    def test_loginpage(self,setup):
        self.logger.info ( "****** Test_001_Login ******" )
        self.logger.info ( "****** Verifying Login page Title ********" )
        self.driver=setup
        self.driver.get(self.baseURL)
        self.lp=loginpage(self.driver)
        self.lp.setusername(self.username)
        self.lp.setpassword(self.password)
        self.lp.clicklogin()
        act_title=self.driver.title
        self.driver.close()

        if act_title == "Dashboard / nopCommerce administration":
            self.logger.info ( "******* Login page title test is passed ********" )
            assert True

        else:
            self.driver.save_screenshot(".\\screenshots\\" + "Test_loginpage.png")
            self.logger.info ( "******* login page title test is failed ********" )
            self.driver.close ()
            assert False


----------------
testcase
   conftest.py
----------------

from selenium import webdriver
import pytest

@pytest.fixture()
def setup(browser):

    if browser == 'chrome':
        driver=webdriver.Chrome(executable_path="C:\DRIVERS\Chrome\chromedriver.exe")
        print("Lanching Chrome browser......")

    else:
        driver = webdriver.Chrome ( executable_path="C:\DRIVERS\Chrome\chromedriver.exe" )
    return driver


def pytest_addoption(parser):
    parser.addoption("--browser")


@pytest.fixture()
def browser(request):
    return request.config.getoption("--browser")

def pytest_configure(config):
    config._metadata['project name']='Nop commerce'
    config._metadata['Module name']='Customers'
    config._metadata['Tester']='Anand'

@pytest.mark.optionalhook
def pytest_metadata(metadata):
    metadata.pop("Java_home",None)
    metadata.pop("plugins",None)


----------------
configurations
   config.ini
----------------

[common info]
baseURL = https://admin-demo.nopcommerce.com/
username = admin@yourstore.com
password = admin

---------------------
utilities
   readproperties.py
----------------------

import configparser

config=configparser.RawConfigParser()
config.read(".\\configurations\\config.ini")

class Readconfig:
    @staticmethod
    def getapplicaionurl():
        url=config.get('common info','baseURL')
        return url


    @staticmethod
    def getusermail():
        username=config.get('common info','username')
        return username


    @staticmethod
    def getpasswod():
        password=config.get('common info','password')
        return password



---------------
utilities
   XLutil.py
---------------

import openpyxl

def getRowcount(file,sheetname):
    workbook=openpyxl.load_workbook(file)
    sheet=workbook[sheetname]
    return (sheet.max_row)

def getColumncount(file,sheetname):
    workbook = openpyxl.load_workbook ( file )
    sheet = workbook[sheetname]
    return (sheet.max_column)

def readData(file,sheetname,rownum,columnnum):
    workbook = openpyxl.load_workbook ( file )
    sheet = workbook[sheetname]
    return sheet.cell(row=rownum,column=columnnum).value

def writeData(file,sheetname,rownum,columnnum,data):
    workbook = openpyxl.load_workbook ( file )
    sheet = workbook[sheetname]
    sheet.cell(row=rownum,column=columnnum).value=data
    workbook.save(file)

--------------------
utilities
   customlogger.py
---------------------

import logging

class logGen:
    @staticmethod
    def loggen():
        logging.basicConfig(filename="file://C:\\Users\\matrix\\PycharmProjects\\seleniumhybridframework\\logs\\automation.log",
            format= '%(asctime)s:%(levelname)s:%(message)s',
            datefmt='%m%d%Y%I:%M:%S %p')
        logger=logging.getLogger()
        logger.setLevel(logging.INFO)
        return logger



run command:
---------------
pytest -s -v testcase/testlogin.py --browser chrome

html report generation:
------------------------
pytest -s -v --html=reports\report.html testcase/testlogin.py --browser chrome

parallel running:
------------------
pytest -s -v -n=2 --html=reports\report.html testcase/testlogin.py --browser chrome

